// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  organizationId String
  role OrgRole

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  projects     Project[]
  apiKeys      ApiKey[]

  @@index([organizationId])
}


model Organization {
  id        String   @id @default(uuid())
  name      String
  slug      String   @unique
  ownerId   String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  users    User[]
  projects Project[]
  apiKeys  ApiKey[]
  auditLogs AuditLog[]
  @@index([ownerId])
}

enum OrgRole {
  ADMIN
  MANAGER
  EMPLOYEE
}


model Project {
  id             String   @id @default(uuid())
  organizationId String
  name           String
  createdById    String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdBy    User         @relation(fields: [createdById], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([organizationId, name])
  @@index([organizationId])
  @@index([createdById])
}

model ApiKey {
  id             String   @id @default(uuid())
  organizationId String
  keyHash        String   @unique // Store hashed version for security
  name           String   // User-friendly name for the key
  createdById    String
  lastUsedAt     DateTime?
  expiresAt      DateTime?  //number of hours
  isActive       Boolean  @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdBy    User         @relation(fields: [createdById], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([organizationId])
  @@index([keyHash])
  @@index([createdById])
}

// Actor type for audit entries
enum ActorType {
  USER
  API_KEY
}

// Persistent audit log for security and activity tracking
model AuditLog {
  id              String     @id @default(uuid())
  organizationId  String?
  actorType       ActorType
  actorId         String
  action          String
  targetType      String?
  targetId        String?
  success         Boolean
  ip              String?
  userAgent       String?
  metadata        Json?
  createdAt       DateTime   @default(now())

  organization    Organization? @relation(fields: [organizationId], references: [id], onDelete: SetNull, onUpdate: Cascade)

  @@index([organizationId])
  @@index([actorType, actorId])
  @@index([action])
  @@index([createdAt])
}